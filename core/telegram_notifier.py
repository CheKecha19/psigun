# core/telegram_notifier.py
import requests
from typing import List, Dict
from utils.data_normalizer import DataNormalizer  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

class TelegramNotifier:
    def __init__(self, config: Dict):
        self.token = config["token"]
        self.chat_id = config["chat_id"]
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.enabled = config.get("enabled", True)
    
    def send_message(self, text: str, silent: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            return True
            
        url = f"{self.base_url}/sendMessage"
        payload = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_notification": silent
        }
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            return True
        except Exception as e:
            print(f"‚ùå Telegram error: {e}")
            return False
    
    def send_opportunities(self, opportunities: List[Dict], title: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ Telegram —Å –Ω–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        if not opportunities:
            message = f"‚ùå <b>{title}</b>\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            self.send_message(message)
            return
        
        message = f"<b>{title} (–¢–û–ü-{len(opportunities)})</b>\n\n"
        
        for i, opp in enumerate(opportunities, 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            profit_label = DataNormalizer.get_profitability_label(opp["net_profit"])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            if opp.get('type') == 'intra' or opp['borrow_exchange'] == opp['staking_exchange']:
                op_type = "üìä –í–ù–£–¢–†–ò"
            else:
                op_type = "üåê –ú–ï–ñ–ë–ò–†–ñ–ê"
                
            message += f"<b>{i}. {opp['coin']}</b> {profit_label} {op_type}\n"
            message += f"   üí∞ –ó–∞–π–º: <code>{opp['borrow_rate']:.4f}%</code> –Ω–∞ <b>{opp['borrow_exchange']}</b>\n"
            message += f"   üìà –°—Ç–µ–π–∫–∏–Ω–≥: <code>{opp['staking_apy']:.2f}%</code> –Ω–∞ <b>{opp['staking_exchange']}</b>\n"
            message += f"   üéØ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <code>{opp['net_profit']:.2f}%</code>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_opps = len(opportunities)
        best_profit = opportunities[0]["net_profit"]
        avg_profit = sum(opp["net_profit"] for opp in opportunities) / len(opportunities)
        
        message += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
        message += f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: <b>{total_opps}</b>\n"
        message += f"   ‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{best_profit:.2f}%</b>\n"
        message += f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: <b>{avg_profit:.2f}%</b>"
        
        self.send_message(message)