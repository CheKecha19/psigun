# exchanges/binance/binance_exchange.py
import requests
import urllib3
import hmac
import hashlib
import time
from typing import Dict, List, Optional
from urllib.parse import urlencode
from ..base_exchange import BaseExchange  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from .binance_loans import BinanceLoans
from .binance_flexible_savings import BinanceFlexibleSavings
from .binance_onchain_savings import BinanceOnchainSavings

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class BinanceExchange(BaseExchange):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    
    def __init__(self, config: Dict):
        super().__init__("Binance", config)
        self.base_url = "https://api.binance.com"
        self.api_key = config.get("api_key", "")
        self.api_secret = config.get("api_secret", "")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        self.loans_module = BinanceLoans(self.base_url, config)
        self.flexible_savings_module = BinanceFlexibleSavings(self.base_url, config)
        self.onchain_savings_module = BinanceOnchainSavings(self.base_url, config)
        print("‚úÖ Binance exchange initialized with modular structure")
    
    def get_loan_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–π–º–∞–º —Å Binance"""
        return self.loans_module.get_loan_rates()
    
    def get_staking_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É —Å Binance"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ —Å Binance...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        flexible_rates = self.flexible_savings_module.get_rates()
        onchain_rates = self.onchain_savings_module.get_rates()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏
        combined_rates = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥–∏–±–∫–∏–µ —Å—Ç–∞–≤–∫–∏
        for coin, data in flexible_rates.items():
            combined_rates[coin] = data
        
        # –î–ª—è –æ–Ω—á–µ–π–Ω —Å—Ç–∞–≤–æ–∫: –µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        for coin, data in onchain_rates.items():
            if coin in combined_rates:
                if data['apy'] > combined_rates[coin]['apy']:
                    combined_rates[coin] = data
            else:
                combined_rates[coin] = data
        
        print(f"üìä Binance: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(flexible_rates)} –≥–∏–±–∫–∏—Ö + {len(onchain_rates)} –æ–Ω—á–µ–π–Ω = {len(combined_rates)} —Å—Ç–∞–≤–æ–∫")
        return combined_rates
    
    def get_available_coins(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance"""
        loan_rates = self.get_loan_rates()
        staking_rates = self.get_staking_rates()
        return list(set(loan_rates.keys()) | set(staking_rates.keys()))