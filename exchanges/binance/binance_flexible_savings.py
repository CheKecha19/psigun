import requests
import urllib3
import hmac
import hashlib
import time
from typing import Dict
from urllib.parse import urlencode

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class BinanceFlexibleSavings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–±–∫–∏–º–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º–∏ Binance"""
    
    def __init__(self, base_url: str, config: Dict):
        self.base_url = base_url
        self.config = config
        self.api_key = config.get("api_key", "")
        self.api_secret = config.get("api_secret", "")
    
    def _sign_request(self, params: Dict) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        query_string = urlencode(params)
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def _make_request(self, endpoint: str, params: Dict = None, signed: bool = False):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API Binance"""
        if params is None:
            params = {}
        
        url = f"{self.base_url}{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if signed:
            params['timestamp'] = int(time.time() * 1000)
            params['signature'] = self._sign_request(params)
        
        headers = {}
        if self.api_key:
            headers['X-MBX-APIKEY'] = self.api_key
        
        try:
            if signed:
                response = requests.post(url, data=params, headers=headers, verify=False, timeout=10)
            else:
                response = requests.get(url, params=params, headers=headers, verify=False, timeout=10)
            
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Binance API ({endpoint}): {e}")
            return None
    
    def get_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ –≥–∏–±–∫–∏–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º –Ω–∞ Binance"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∏–±–∫–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è—Ö —Å Binance...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
        endpoint = "/sapi/v1/staking/productList"
        params = {'product': 'STAKING'}
        
        response = self._make_request(endpoint, params, signed=True)
        
        if not response:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
            return self._get_sample_staking_rates()
        
        return self._normalize_staking_data(response)
    
    def _normalize_staking_data(self, raw_data: list) -> Dict[str, Dict]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ"""
        normalized = {}
        
        try:
            print(f"üìä Binance staking data: –ø–æ–ª—É—á–µ–Ω–æ {len(raw_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            
            for product in raw_data:
                asset = product.get('asset', '').upper()
                apr = product.get('apr')
                
                if asset and apr:
                    try:
                        apy = float(apr)
                        
                        normalized[asset] = {
                            'apy': apy,
                            'min_amount': float(product.get('minPurchaseAmount', 0)),
                            'max_amount': 0
                        }
                        print(f"   üè¶ {asset}: {apy:.2f}% APY")
                    except (ValueError, TypeError) as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è {asset}: {apr} - {e}")
                        continue
            
            print(f"üìä Binance: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ {len(normalized)} —Å—Ç–∞–≤–æ–∫ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É")
            return normalized
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ Binance: {e}")
            return self._get_sample_staking_rates()
    
    def _get_sample_staking_rates(self) -> Dict[str, Dict]:
        """–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        sample_rates = {
            'ADA': {'apy': 4.5, 'min_amount': 0, 'max_amount': 0},
            'DOT': {'apy': 12.0, 'min_amount': 0, 'max_amount': 0},
            'ATOM': {'apy': 15.0, 'min_amount': 0, 'max_amount': 0},
            'SOL': {'apy': 7.5, 'min_amount': 0, 'max_amount': 0},
            'ETH': {'apy': 4.0, 'min_amount': 0, 'max_amount': 0},
            'MATIC': {'apy': 3.0, 'min_amount': 0, 'max_amount': 0},
            'BNB': {'apy': 2.0, 'min_amount': 0, 'max_amount': 0},
        }
        
        print("üìä Binance: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞")
        for coin, data in sample_rates.items():
            print(f"   üè¶ {coin}: {data['apy']:.2f}% APY (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)")
        
        return sample_rates