import requests
import urllib3
import hmac
import hashlib
import time
from typing import Dict
from urllib.parse import urlencode

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class BinanceOnchainSavings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–Ω—á–µ–π–Ω —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º–∏ Binance"""
    
    def __init__(self, base_url: str, config: Dict):
        self.base_url = base_url
        self.config = config
        self.api_key = config.get("api_key", "")
        self.api_secret = config.get("api_secret", "")
    
    def get_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ –æ–Ω—á–µ–π–Ω —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º –Ω–∞ Binance"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –æ–Ω—á–µ–π–Ω —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è—Ö —Å Binance...")
        
        # –î–ª—è Binance –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ –¥–ª—è –≥–∏–±–∫–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–Ω—á–µ–π–Ω –ø—Ä–æ–¥—É–∫—Ç—ã
        return {}
    
    def _get_alternative_staking_rates(self) -> Dict[str, Dict]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        print("üîç –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ...")
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞ (—Ç—Ä–µ–±—É–µ—Ç signed –∑–∞–ø—Ä–æ—Å)
        endpoint = "/sapi/v1/staking/position"
        params = {'product': 'STAKING'}
        
        response = self._make_request(endpoint, params, signed=True)
        
        if response and isinstance(response, list):
            return self._normalize_staking_positions(response)
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–µ–π–∫–∏–Ω–≥–µ")
            return self._get_sample_staking_rates()
    
    def _make_request(self, endpoint: str, params: Dict = None, signed: bool = False):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API Binance"""
        if params is None:
            params = {}
        
        url = f"{self.base_url}{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if signed:
            params['timestamp'] = int(time.time() * 1000)
            params['signature'] = self._sign_request(params)
        
        headers = {}
        if self.api_key:
            headers['X-MBX-APIKEY'] = self.api_key
        
        try:
            if signed:
                response = requests.post(url, data=params, headers=headers, verify=False, timeout=10)
            else:
                response = requests.get(url, params=params, headers=headers, verify=False, timeout=10)
            
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Binance API ({endpoint}): {e}")
            return None
    
    def _sign_request(self, params: Dict) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        query_string = urlencode(params)
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def _normalize_staking_positions(self, positions: list) -> Dict[str, Dict]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞"""
        normalized = {}
        
        try:
            for position in positions:
                asset = position.get('asset', '').upper()
                apr = position.get('apr')
                
                if asset and apr:
                    try:
                        apy = float(apr)
                        
                        normalized[asset] = {
                            'apy': apy,
                            'min_amount': 0,
                            'max_amount': 0
                        }
                        print(f"   üè¶ {asset}: {apy:.2f}% APY (–∏–∑ –ø–æ–∑–∏—Ü–∏–π)")
                    except (ValueError, TypeError):
                        continue
            
            return normalized
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}")
            return {}
    
    def _get_sample_staking_rates(self) -> Dict[str, Dict]:
        """–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        sample_rates = {
            'ADA': {'apy': 4.5, 'min_amount': 0, 'max_amount': 0},
            'DOT': {'apy': 12.0, 'min_amount': 0, 'max_amount': 0},
            'ATOM': {'apy': 15.0, 'min_amount': 0, 'max_amount': 0},
        }
        
        print("üìä Binance: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –æ–Ω—á–µ–π–Ω —Å—Ç–µ–π–∫–∏–Ω–≥–∞")
        return sample_rates