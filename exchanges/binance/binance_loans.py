import requests
import urllib3
import hmac
import hashlib
import time
from typing import Dict
from urllib.parse import urlencode

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class BinanceLoans:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–π–º–∞–º–∏ Binance"""
    
    def __init__(self, base_url: str, config: Dict):
        self.base_url = base_url
        self.config = config
        self.api_key = config.get("api_key", "")
        self.api_secret = config.get("api_secret", "")
    
    def _sign_request(self, params: Dict) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        query_string = urlencode(params)
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def _make_request(self, endpoint: str, params: Dict = None, signed: bool = False):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API Binance"""
        if params is None:
            params = {}
        
        url = f"{self.base_url}{endpoint}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if signed:
            params['timestamp'] = int(time.time() * 1000)
            params['signature'] = self._sign_request(params)
        
        headers = {}
        if self.api_key:
            headers['X-MBX-APIKEY'] = self.api_key
        
        try:
            if signed:
                response = requests.post(url, data=params, headers=headers, verify=False, timeout=10)
            else:
                response = requests.get(url, params=params, headers=headers, verify=False, timeout=10)
            
            if response.status_code == 401:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Binance API: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                return None
            elif response.status_code == 404:
                print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç Binance API –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint}")
                return None
            
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Binance API ({endpoint}): {e}")
            return None
    
    def get_loan_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–º –∑–∞–π–º–∞–º –Ω–∞ Binance"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–π–º–∞—Ö —Å Binance...")
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        endpoint = "/sapi/v1/margin/interestRateHistory"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
        major_coins = ['BTC', 'ETH', 'BNB', 'USDT', 'USDC', 'ADA', 'DOT', 'LTC', 'LINK', 'BCH']
        normalized = {}
        
        for coin in major_coins:
            params = {'asset': coin}
            response = self._make_request(endpoint, params)
            
            if response and isinstance(response, list) and len(response) > 0:
                try:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç–∞–≤–∫—É
                    latest_rate = response[0]
                    daily_rate = float(latest_rate.get('interestRate', 0))
                    annual_rate = daily_rate * 365 * 100
                    
                    normalized[coin] = {
                        'rate': annual_rate,
                        'min_amount': 0,
                        'max_amount': 0,
                        'daily_rate': daily_rate * 100
                    }
                    print(f"   üí∞ {coin}: {annual_rate:.2f}% –≥–æ–¥–æ–≤—ã—Ö (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)")
                    
                except (ValueError, TypeError, IndexError) as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è {coin}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é")
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
                    backup_rates = self._get_backup_loan_rates(coin)
                    normalized[coin] = backup_rates
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ
                print(f"   ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏")
                backup_rates = self._get_backup_loan_rates(coin)
                normalized[coin] = backup_rates
        
        print(f"üìä Binance: –ø–æ–ª—É—á–µ–Ω–æ {len(normalized)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ –∑–∞–π–º–∞–º")
        return normalized
    
    def _get_backup_loan_rates(self, coin: str) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        rate_map = {
            'BTC': 3.5, 'ETH': 3.5, 'BNB': 3.5,
            'USDT': 5.0, 'USDC': 5.0, 'BUSD': 5.0,
        }
        return {
            'rate': rate_map.get(coin, 8.0),
            'min_amount': 0,
            'max_amount': 0
        }