# exchanges/okx/okx_loans.py
import requests
import urllib3
import hashlib
import hmac
import base64
import json
from typing import Dict
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class OkxLoans:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–π–º–∞–º–∏ OKX"""
    
    def __init__(self, base_url: str, config: Dict):
        self.base_url = base_url
        self.config = config
        self.api_key = config.get("api_key", "")
        self.api_secret = config.get("api_secret", "")
        self.passphrase = config.get("passphrase", "")
    
    def _make_signed_request(self, method: str, endpoint: str, params: Dict = None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API OKX"""
        if params is None:
            params = {}
        
        timestamp = datetime.utcnow().isoformat(timespec='milliseconds') + 'Z'
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = ""
        if method == "GET" and params:
            query_string = "&".join([f"{k}={v}" for k, v in params.items()])
            request_path = f"{endpoint}?{query_string}"
        else:
            request_path = endpoint
            if method in ["POST", "PUT"] and params:
                body = json.dumps(params, separators=(',', ':'))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        message = timestamp + method.upper() + request_path + body
        signature = base64.b64encode(
            hmac.new(
                self.api_secret.encode('utf-8'),
                message.encode('utf-8'),
                hashlib.sha256
            ).digest()
        ).decode()
        
        headers = {
            "OK-ACCESS-KEY": self.api_key,
            "OK-ACCESS-SIGN": signature,
            "OK-ACCESS-TIMESTAMP": timestamp,
            "OK-ACCESS-PASSPHRASE": self.passphrase,
            "Content-Type": "application/json"
        }
        
        url = f"{self.base_url}{request_path}" if method == "GET" and params else f"{self.base_url}{endpoint}"
        
        try:
            if method == "GET":
                response = requests.get(url, headers=headers, verify=False, timeout=10)
            elif method == "POST":
                response = requests.post(url, headers=headers, data=body, verify=False, timeout=10)
            else:
                return None
            
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OKX API ({endpoint}): {e}")
            return None
    
    def get_loan_rates(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–π–º–∞–º —Å OKX"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–π–º–∞—Ö —Å OKX...")
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è
        endpoint = "/api/v5/account/interest-rate"
        params = {}
        
        response = self._make_signed_request("GET", endpoint, params)
        if not response or response.get("code") != "0":
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–π–º–∞—Ö OKX")
            return self._get_sample_loan_rates()
        
        return self._normalize_loan_data(response)
    
    def _normalize_loan_data(self, raw_data: Dict) -> Dict[str, Dict]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–π–º–∞—Ö"""
        normalized = {}
    
        try:
            data_list = raw_data.get("data", [])
        
            for item in data_list:
                currency = item.get("ccy", "").upper()
                interest_rate = item.get("interestRate")
            
                if currency and interest_rate is not None:
                    try:
                        # –£–ú–ù–û–ñ–ê–ï–ú –ù–ê 100 –î–õ–Ø –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –í –ü–†–û–¶–ï–ù–¢–´
                        rate = float(interest_rate) * 100  # –£–±–∏—Ä–∞–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 365
                    
                        normalized[currency] = {
                            'rate': rate,
                            'min_amount': 0,
                            'max_amount': 0
                        }
                        print(f"   üí∞ {currency}: {rate:.2f}% –≥–æ–¥–æ–≤—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
                    except (ValueError, TypeError):
                        continue
        
            print(f"üìä OKX: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ {len(normalized)} —Å—Ç–∞–≤–æ–∫ –ø–æ –∑–∞–π–º–∞–º (—Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –Ω–∞ 100)")
            return normalized
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–π–º–∞—Ö OKX: {e}")
            return self._get_sample_loan_rates()
    
    def _get_sample_loan_rates(self) -> Dict[str, Dict]:
        """–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–π–º–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        sample_rates = {
            'BTC': {'rate': 3.5, 'min_amount': 0, 'max_amount': 0},
            'ETH': {'rate': 3.5, 'min_amount': 0, 'max_amount': 0},
            'USDT': {'rate': 5.0, 'min_amount': 0, 'max_amount': 0},
            'USDC': {'rate': 5.0, 'min_amount': 0, 'max_amount': 0},
        }
        
        print("üìä OKX: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–π–º–æ–≤")
        return sample_rates