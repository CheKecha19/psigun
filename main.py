# main.py
import sys
import os
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

from config import TELEGRAM_CONFIG, ARBITRAGE_CONFIG, EXCHANGES_CONFIG
from exchanges.bybit.bybit_exchange import BybitExchange
from exchanges.okx.okx_exchange import OkxExchange
from exchanges.binance.binance_exchange import BinanceExchange
from core.arbitrage_analyzer import ArbitrageAnalyzer
from core.telegram_notifier import TelegramNotifier
from core.cross_exchange_analyzer import CrossExchangeAnalyzer
from utils.data_normalizer import DataNormalizer  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

class ArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.telegram_notifier = TelegramNotifier(TELEGRAM_CONFIG)
        self.exchanges = self._initialize_exchanges()
        self.analyzer = ArbitrageAnalyzer(min_profit_threshold=ARBITRAGE_CONFIG["min_profit_threshold"])
        self.cross_analyzer = CrossExchangeAnalyzer(min_profit_threshold=ARBITRAGE_CONFIG["min_profit_threshold"])
    
    def _initialize_exchanges(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –±–∏—Ä–∂–∏"""
        exchanges = []
        
        if EXCHANGES_CONFIG["bybit"]["enabled"]:
            exchanges.append(BybitExchange(EXCHANGES_CONFIG["bybit"]))
            print("‚úÖ Bybit exchange initialized")
        
        if EXCHANGES_CONFIG["okx"]["enabled"]:
            exchanges.append(OkxExchange(EXCHANGES_CONFIG["okx"]))
            print("‚úÖ OKX exchange initialized")
        
        if EXCHANGES_CONFIG["binance"]["enabled"]:
            exchanges.append(BinanceExchange(EXCHANGES_CONFIG["binance"]))
            print("‚úÖ Binance exchange initialized")
        
        return exchanges
    
    def collect_all_data(self):
        """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂"""
        print("\nüìä –°–ë–û–† –î–ê–ù–ù–´–• –° –ë–ò–†–ñ...")
        all_data = {}
        
        for exchange in self.exchanges:
            print(f"\nüîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å {exchange.name}...")
            try:
                loan_rates = exchange.get_loan_rates()
                staking_rates = exchange.get_staking_rates()
                
                all_data[exchange.name] = {
                    'loan_rates': loan_rates,
                    'staking_rates': staking_rates,
                    'exchange': exchange
                }
                
                print(f"‚úÖ {exchange.name}: {len(loan_rates)} –∑–∞–π–º–æ–≤, {len(staking_rates)} —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å {exchange.name}: {e}")
                all_data[exchange.name] = {'loan_rates': {}, 'staking_rates': {}, 'exchange': exchange}
        
        return all_data
    
    def find_best_staking_opportunities(self, all_data: Dict) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏ –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö"""
        best_staking = []
        
        for exchange_name, data in all_data.items():
            staking_rates = data['staking_rates']
            
            for coin, staking_info in staking_rates.items():
                apy = staking_info.get('apy', 0)
                
                if apy > 5:  # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤
                    best_staking.append({
                        'coin': coin,
                        'apy': apy,
                        'exchange': exchange_name,
                        'min_amount': staking_info.get('min_amount', 0),
                        'max_amount': staking_info.get('max_amount', 0)
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é APY
        return sorted(best_staking, key=lambda x: x['apy'], reverse=True)
    
    def find_hot_loan_opportunities(self, all_data: Dict) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –¥–æ—Ä–æ–≥–∏–µ –∑–∞–π–º—ã (—Å—É–µ—Ç–∞ –≤ –º–æ–Ω–µ—Ç–µ)"""
        hot_loans = []
        
        for exchange_name, data in all_data.items():
            loan_rates = data['loan_rates']
            
            for coin, loan_info in loan_rates.items():
                rate = loan_info.get('rate', 0)
                
                if rate > 15:  # –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–π–º–∞–º
                    reason = self._get_loan_reason(rate)
                    hot_loans.append({
                        'coin': coin,
                        'rate': rate,
                        'exchange': exchange_name,
                        'min_amount': loan_info.get('min_amount', 0),
                        'max_amount': loan_info.get('max_amount', 0),
                        'reason': reason
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–∞–≤–∫–∏
        return sorted(hot_loans, key=lambda x: x['rate'], reverse=True)
    
    def _get_loan_reason(self, rate: float) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞–≤–∫–∏"""
        if rate > 50:
            return "üöÄ –û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø –î–û–•–û–î–ù–û–°–¢–¨"
        elif rate > 30:
            return "üî• –í–´–°–û–ö–ò–ô –°–ü–†–û–°"
        elif rate > 20:
            return "‚ö° –ü–û–í–´–®–ï–ù–ù–´–ô –°–ü–†–û–°"
        elif rate > 15:
            return "üìà –ê–ö–¢–ò–í–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø"
        else:
            return "üìä –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –°–¢–ê–í–ö–ê"

    def find_intra_exchange_opportunities(self, all_data: Dict):
        """–ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        print("\nüéØ –ü–û–ò–°–ö –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô...")
        intra_opportunities = []
    
        for exchange_name, data in all_data.items():
            exchange = data['exchange']
            loan_rates = data['loan_rates']
            staking_rates = data['staking_rates']
        
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {exchange_name}...")
        
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –º–æ–Ω–µ—Ç—ã
            common_coins = set(loan_rates.keys()) & set(staking_rates.keys())
            print(f"   üìä –û–±—â–∏—Ö –º–æ–Ω–µ—Ç: {len(common_coins)}")
        
            for coin in common_coins:
                lending_info = loan_rates[coin]
                staking_info = staking_rates[coin]
                lending_rate = lending_info['rate']
                staking_apy = staking_info['apy']
                net_profit = staking_apy - lending_rate
            
                if net_profit >= self.analyzer.min_profit_threshold:
                    intra_opportunities.append({
                        "coin": coin,
                        "borrow_rate": lending_rate,
                        "borrow_exchange": exchange_name,
                        "staking_apy": staking_apy,
                        "staking_exchange": exchange_name,  # –í—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –±–∏—Ä–∂–∞
                        "net_profit": net_profit,
                        "profitability": exchange.get_profitability_label(net_profit),
                        "type": "intra"
                    })
    
        # –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –£–ë–´–í–ê–ù–ò–Æ –ü–†–ò–ë–´–õ–ò
        return sorted(intra_opportunities, key=lambda x: x["net_profit"], reverse=True)
    
    def find_cross_exchange_opportunities(self, all_data: Dict):
        """–ù–∞–π—Ç–∏ –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        print("\nüåê –ü–û–ò–°–ö –ú–ï–ñ–ë–ò–†–ñ–ï–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô...")
        cross_opportunities = []
    
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏ –∏ –∑–∞–π–º—ã –≤ –æ–±—â–∏–µ –ø—É–ª—ã
        all_staking_rates = {}
        all_loan_rates = {}
    
        for exchange_name, data in all_data.items():
            all_staking_rates[exchange_name] = data['staking_rates']
            all_loan_rates[exchange_name] = data['loan_rates']
    
        # –ò—â–µ–º –ª—É—á—à–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for coin in self._get_all_coins(all_data):
            best_staking = self._find_best_staking(coin, all_staking_rates)
            best_loan = self._find_best_loan(coin, all_loan_rates)
        
            if best_staking and best_loan:
                staking_exchange, staking_apy = best_staking
                loan_exchange, loan_rate = best_loan
            
                # –£–ë–ï–î–ò–ú–°–Ø, –ß–¢–û –ë–ò–†–ñ–ò –†–ê–ó–ù–´–ï
                if staking_exchange != loan_exchange:
                    net_profit = staking_apy - loan_rate
                
                    if net_profit >= self.cross_analyzer.min_profit_threshold:
                        cross_opportunities.append({
                            "coin": coin,
                            "borrow_rate": loan_rate,
                            "borrow_exchange": loan_exchange,
                            "staking_apy": staking_apy,
                            "staking_exchange": staking_exchange,
                            "net_profit": net_profit,
                            "profitability": self._get_profitability_label(net_profit),
                            "type": "cross"
                        })
    
        # –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –£–ë–´–í–ê–ù–ò–Æ –ü–†–ò–ë–´–õ–ò
        return sorted(cross_opportunities, key=lambda x: x["net_profit"], reverse=True)
    
    def _get_all_coins(self, all_data: Dict):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã"""
        all_coins = set()
        for data in all_data.values():
            all_coins.update(data['loan_rates'].keys())
            all_coins.update(data['staking_rates'].keys())
        return all_coins
    
    def _find_best_staking(self, coin: str, all_staking_rates: Dict):
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–π —Å—Ç–µ–π–∫–∏–Ω–≥ –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        best_apy = 0
        best_exchange = None
        
        for exchange_name, staking_rates in all_staking_rates.items():
            if coin in staking_rates:
                apy = staking_rates[coin]['apy']
                if apy > best_apy:
                    best_apy = apy
                    best_exchange = exchange_name
        
        return (best_exchange, best_apy) if best_exchange else None
    
    def _find_best_loan(self, coin: str, all_loan_rates: Dict):
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–π –∑–∞–π–º –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        best_rate = float('inf')
        best_exchange = None
        
        for exchange_name, loan_rates in all_loan_rates.items():
            if coin in loan_rates:
                rate = loan_rates[coin]['rate']
                if rate < best_rate:
                    best_rate = rate
                    best_exchange = exchange_name
        
        return (best_exchange, best_rate) if best_exchange else None
    
    def _get_profitability_label(self, net_profit: float) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        return DataNormalizer.get_profitability_label(net_profit)
    
    def create_summary_table(self, intra_opportunities: List, cross_opportunities: List):
        """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í"""
        print("\nüìà –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–û–ô –¢–ê–ë–õ–ò–¶–´...")
    
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        # –ö–ª—é—á: (coin, borrow_exchange, staking_exchange)
        unique_opportunities = {}
    
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        for opp in intra_opportunities:
            key = (opp["coin"], opp["borrow_exchange"], opp["staking_exchange"])
            if key not in unique_opportunities:
                unique_opportunities[key] = opp
    
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        for opp in cross_opportunities:
            key = (opp["coin"], opp["borrow_exchange"], opp["staking_exchange"])
            if key not in unique_opportunities:
                unique_opportunities[key] = opp
    
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–±—ã–ª–∏
        all_opportunities = list(unique_opportunities.values())
        return sorted(all_opportunities, key=lambda x: x["net_profit"], reverse=True)
    
    def display_results(self, intra_opportunities: List, cross_opportunities: List, summary_opportunities: List):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    
        # –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        print(f"\nüéØ –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò (—Ç–æ–ø-20):")
        self._display_opportunities_table(intra_opportunities[:20], "intra")
    
        # –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        print(f"\nüåê –ú–ï–ñ–ë–ò–†–ñ–ï–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò (—Ç–æ–ø-20):")
        self._display_opportunities_table(cross_opportunities[:20], "cross")
    
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        print(f"\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –í–°–ï–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô (—Ç–æ–ø-20):")
        self._display_opportunities_table(summary_opportunities[:20], "summary")
    
    def _display_opportunities_table(self, opportunities: List, opp_type: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if not opportunities:
            print("‚ùå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"{'–ú–æ–Ω–µ—Ç–∞':<10} {'–ó–∞–π–º –Ω–∞':<12} {'–°—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞':<12} {'–°—Ç–∞–≤–∫–∞ –∑–∞–π–º–∞':<14} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å':<15} {'–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å':<12}")
        print("=" * 95)
        
        for i, opp in enumerate(opportunities, 1):
            # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            if opp["net_profit"] > 100:
                color = "\033[95m"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif opp["net_profit"] > 50:
                color = "\033[91m"  # –ö—Ä–∞—Å–Ω—ã–π
            elif opp["net_profit"] > 20:
                color = "\033[95m"  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            elif opp["net_profit"] > 15:
                color = "\033[92m"  # –ó–µ–ª–µ–Ω—ã–π
            elif opp["net_profit"] > 10:
                color = "\033[93m"  # –ñ–µ–ª—Ç—ã–π
            elif opp["net_profit"] > 2:
                color = "\033[94m"  # –°–∏–Ω–∏–π
            else:
                color = "\033[91m"  # –ö—Ä–∞—Å–Ω—ã–π
            reset = "\033[0m"
            
            print(f"{i:2d}. {opp['coin']:<8} {opp['borrow_exchange'][:10]:<10} {opp['staking_exchange'][:10]:<10} "
                  f"{opp['borrow_rate']:<13.4f} {opp['staking_apy']:<11.2f} "
                  f"{color}{opp['net_profit']:<14.2f}{reset} {opp['profitability']:<12}")
    
    def send_telegram_reports(self, intra_opportunities: List, cross_opportunities: List, summary_opportunities: List):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –≤ Telegram"""
        print("\nüì® –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–ï–¢–û–í –í TELEGRAM...")
        
        # –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if intra_opportunities:
            self.telegram_notifier.send_opportunities(
                intra_opportunities[:20], 
                "üéØ –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–´–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò"
            )
        
        # –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if cross_opportunities:
            self.telegram_notifier.send_opportunities(
                cross_opportunities[:20],
                "üåê –ú–ï–ñ–ë–ò–†–ñ–ï–í–´–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò"
            )
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        if summary_opportunities:
            self.telegram_notifier.send_opportunities(
                summary_opportunities[:20],
                "üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô"
            )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = ArbitrageBot()
    
    if not bot.exchanges:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    bot.telegram_notifier.send_message("üîÑ <b>–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>", silent=True)
    
    try:
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂
        all_data = bot.collect_all_data()
        
        # 2. –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        intra_opportunities = bot.find_intra_exchange_opportunities(all_data)
        
        # 3. –ü–æ–∏—Å–∫ –º–µ–∂–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        cross_opportunities = bot.find_cross_exchange_opportunities(all_data)
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        summary_opportunities = bot.create_summary_table(intra_opportunities, cross_opportunities)
        
        # 5. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
        bot.display_results(intra_opportunities, cross_opportunities, summary_opportunities)
        
        # 6. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –≤ Telegram
        bot.send_telegram_reports(intra_opportunities, cross_opportunities, summary_opportunities)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(intra_opportunities)}")
        print(f"   ‚Ä¢ –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(cross_opportunities)}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(summary_opportunities)}")
        
        if summary_opportunities:
            best_profit = summary_opportunities[0]["net_profit"]
            print(f"   ‚Ä¢ –õ—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {best_profit:.2f}%")
        
        print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        
    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        bot.telegram_notifier.send_message(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:</b>\n<code>{str(e)}</code>")

if __name__ == "__main__":
    main()