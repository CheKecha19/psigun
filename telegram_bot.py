# telegram_bot.py
import asyncio
import logging
from typing import List, Dict, Optional, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

from config import TELEGRAM_CONFIG
from main import ArbitrageBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ArbitrageTelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.arbitrage_bot = None
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("best_staking", self.best_staking_command))
        self.application.add_handler(CommandHandler("hot_loans", self.hot_loans_command))
        self.application.add_handler(CommandHandler("debug", self.debug_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/analyze - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
/status - –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç
/best_staking - –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏
/hot_loans - –í –º–æ–Ω–µ—Ç–µ –Ω–∞–º–µ—á–∞–µ—Ç—Å—è —Å—É–µ—Ç–∞ (–¥–æ—Ä–æ–≥–∏–µ –∑–∞–π–º—ã)
/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

‚ö° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏:</b>
‚Ä¢ Bybit
‚Ä¢ OKX  
‚Ä¢ Binance

–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏ –∑–∞–π–º–æ–≤ –∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
        """
        await update.message.reply_html(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–ü–û–ú–û–©–¨ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ë–û–¢–ê</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/analyze - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
/best_staking - –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É
/hot_loans - –ú–æ–Ω–µ—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –∑–∞–π–º–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–≤–∫–∞—Ö –∑–∞–π–º–æ–≤ —Å –±–∏—Ä–∂
2. –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
3. –ù–∞—Ö–æ–¥–∏—Ç –º–æ–Ω–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å (—Å—Ç–µ–π–∫–∏–Ω–≥ - –∑–∞–π–º)
5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

<b>–¢–∏–ø—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>
‚Ä¢ üéØ –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤–æ–π - –∑–∞–π–º –∏ —Å—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ
‚Ä¢ üåê –ú–µ–∂–±–∏—Ä–∂–µ–≤–æ–π - –∑–∞–π–º –Ω–∞ –æ–¥–Ω–æ–π, —Å—Ç–µ–π–∫–∏–Ω–≥ –Ω–∞ –¥—Ä—É–≥–æ–π –±–∏—Ä–∂–µ

<b>–ú–µ—Ç–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏:</b>
üëë –û–¢–õ–ò–ß–ù–ê–Ø (>20%) | üü¢ –•–û–†–û–®–ê–Ø (>15%) | üü° –ù–ò–ó–ö–ê–Ø (>10%) | üîµ –ë–ï–ó–£–ë–´–¢–û–ö (>2%) | üî¥ –£–ë–´–¢–û–ß–ù–ê–Ø

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏:</b>
‚Ä¢ Bybit, OKX, Binance
        """
        await update.message.reply_html(help_text)
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            status_message = await update.message.reply_text(
                "üîÑ <b>–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>\n"
                "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...",
                parse_mode='HTML'
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            asyncio.create_task(
                self.run_analysis_async_safe(chat_id, status_message.message_id)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ analyze_command: {e}")
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞:</b>\n<code>{str(e)}</code>",
                parse_mode='HTML'
            )
    
    async def run_analysis_async_safe(self, chat_id: int, message_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            await self.run_analysis_async(chat_id, message_id)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_analysis_async_safe: {e}")
            await self.send_error(chat_id, message_id, f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n<code>{str(e)}</code>")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∏—Ä–∂"""
        try:
            if not self.arbitrage_bot:
                self.arbitrage_bot = ArbitrageBot()
            
            status_text = "üìä <b>–°–¢–ê–¢–£–° –ë–ò–†–ñ</b>\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
            for exchange in self.arbitrage_bot.exchanges:
                status_text += f"<b>{exchange.name}</b>\n"
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                    loan_coins = exchange.get_loan_rates()
                    staking_coins = exchange.get_staking_rates()
                    
                    status_text += f"‚úÖ –ó–∞–π–º—ã: {len(loan_coins)} –º–æ–Ω–µ—Ç\n"
                    status_text += f"‚úÖ –°—Ç–µ–π–∫–∏–Ω–≥: {len(staking_coins)} –º–æ–Ω–µ—Ç\n"
                    status_text += f"üìà –û–±—â–∏–µ –º–æ–Ω–µ—Ç—ã: {len(set(loan_coins.keys()) & set(staking_coins.keys()))}\n"
                    
                except Exception as e:
                    status_text += f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                
                status_text += "\n"
            
            await update.message.reply_html(status_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    async def best_staking_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏"""
        try:
            if not self.arbitrage_bot:
                self.arbitrage_bot = ArbitrageBot()
            
            await update.message.reply_text("üîÑ <b>–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ª—É—á—à–∏—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–∞—Ö...</b>", parse_mode='HTML')
            
            all_data = self.arbitrage_bot.collect_all_data()
            best_staking = self.arbitrage_bot.find_best_staking_opportunities(all_data)
            
            if best_staking:
                message = self._format_best_staking_message(best_staking)
            else:
                message = "‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤</b>"
            
            await update.message.reply_html(message)
            
        except Exception as e:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–µ–π–∫–∏–Ω–≥–æ–≤:</b>\n<code>{str(e)}</code>"
            await update.message.reply_html(error_msg)
    
    async def hot_loans_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ä–æ–≥–∏–µ –∑–∞–π–º—ã (—Å—É–µ—Ç–∞ –≤ –º–æ–Ω–µ—Ç–µ)"""
        try:
            if not self.arbitrage_bot:
                self.arbitrage_bot = ArbitrageBot()
            
            await update.message.reply_text("üîÑ <b>–ò—â—É –º–æ–Ω–µ—Ç—ã —Å –¥–æ—Ä–æ–≥–∏–º–∏ –∑–∞–π–º–∞–º–∏...</b>", parse_mode='HTML')
            
            all_data = self.arbitrage_bot.collect_all_data()
            hot_loans = self.arbitrage_bot.find_hot_loan_opportunities(all_data)
            
            if hot_loans:
                message = self._format_hot_loans_message(hot_loans)
            else:
                message = "‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç —Å –¥–æ—Ä–æ–≥–∏–º–∏ –∑–∞–π–º–∞–º–∏</b>"
            
            await update.message.reply_html(message)
            
        except Exception as e:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–π–º–æ–≤:</b>\n<code>{str(e)}</code>"
            await update.message.reply_html(error_msg)
    
    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        await update.message.reply_text(
            f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            f"–ß–∞—Ç ID: {update.effective_chat.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name}\n"
            f"Bot enabled: {TELEGRAM_CONFIG.get('bot_enabled', True)}"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/analyze - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑\n"
            "/best_staking - –ª—É—á—à–∏–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∏\n"
            "/hot_loans - –¥–æ—Ä–æ–≥–∏–µ –∑–∞–π–º—ã\n"
            "/status - —Å—Ç–∞—Ç—É—Å –±–∏—Ä–∂\n" 
            "/help - –ø–æ–º–æ—â—å"
        )
    
    def _format_best_staking_message(self, staking_opportunities: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª—É—á—à–∏—Ö —Å—Ç–µ–π–∫–∏–Ω–≥–∞—Ö"""
        message = "üèÜ <b>–õ–£–ß–®–ò–ï –°–¢–ï–ô–ö–ò–ù–ì–ò –ù–ê –í–°–ï–• –ë–ò–†–ñ–ê–•</b>\n\n"
        
        for i, opp in enumerate(staking_opportunities[:15], 1):
            message += f"<b>{i}. {opp['coin']}</b>\n"
            message += f"   üìà APY: <code>{opp['apy']:.2f}%</code>\n"
            message += f"   üè¶ –ë–∏—Ä–∂–∞: <b>{opp['exchange']}</b>\n"
            message += f"   üí∞ –ú–∏–Ω. —Å—É–º–º–∞: <code>{opp['min_amount']}</code>\n\n"
        
        return message
    
    def _format_hot_loans_message(self, loan_opportunities: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Ä–æ–≥–∏—Ö –∑–∞–π–º–∞—Ö"""
        message = "üî• <b>–í –ú–û–ù–ï–¢–ï –ù–ê–ú–ï–ö–ê–ï–¢–°–Ø –°–£–ï–¢–ê (–î–û–†–û–ì–ò–ï –ó–ê–ô–ú–´)</b>\n\n"
        
        for i, opp in enumerate(loan_opportunities[:15], 1):
            message += f"<b>{i}. {opp['coin']}</b>\n"
            message += f"   üí∏ –°—Ç–∞–≤–∫–∞: <code>{opp['rate']:.2f}%</code>\n"
            message += f"   üè¶ –ë–∏—Ä–∂–∞: <b>{opp['exchange']}</b>\n"
            message += f"   üìä –ü—Ä–∏—á–∏–Ω–∞: {opp['reason']}\n\n"
        
        return message
    
    async def run_analysis_async(self, chat_id: int, message_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            arbitrage_bot = ArbitrageBot()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            print("üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂...")
            all_data = arbitrage_bot.collect_all_data()
            
            print("üéØ –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
            intra_opportunities = arbitrage_bot.find_intra_exchange_opportunities(all_data)
            
            print("üåê –ò—â–µ–º –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...")
            cross_opportunities = arbitrage_bot.find_cross_exchange_opportunities(all_data)
            
            print("üìà –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
            summary_opportunities = arbitrage_bot.create_summary_table(intra_opportunities, cross_opportunities)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            print("üì® –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            report = self.format_analysis_report(intra_opportunities, cross_opportunities, summary_opportunities)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.send_analysis_results(chat_id, message_id, report)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_analysis_async: {e}")
            import traceback
            traceback.print_exc()
            error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:</b>\n<code>{str(e)}</code>"
            await self.send_error(chat_id, message_id, error_message)
    
    def format_analysis_report(self, intra_opportunities: List[Dict], cross_opportunities: List[Dict], summary_opportunities: List[Dict]) -> Dict[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        report = {}
        
        # –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if intra_opportunities:
            report['intra'] = self._format_opportunities_message(
                intra_opportunities[:10],
                "üéØ –í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–´–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò"
            )
        else:
            report['intra'] = "‚ùå <b>–í–ù–£–¢–†–ò–ë–ò–†–ñ–ï–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò</b>\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        
        # –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if cross_opportunities:
            report['cross'] = self._format_opportunities_message(
                cross_opportunities[:10],
                "üåê –ú–ï–ñ–ë–ò–†–ñ–ï–í–´–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò"
            )
        else:
            report['cross'] = "‚ùå <b>–ú–ï–ñ–ë–ò–†–ñ–ï–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò</b>\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report['summary'] = self._format_summary(intra_opportunities, cross_opportunities, summary_opportunities)
        
        return report
    
    def _format_opportunities_message(self, opportunities: List[Dict], title: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not opportunities:
            return f"‚ùå <b>{title}</b>\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        
        message = f"<b>{title} (–¢–û–ü-{len(opportunities)})</b>\n\n"
        
        for i, opp in enumerate(opportunities, 1):
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            if opp["net_profit"] > 20:
                profit_emoji = "üëë"
            elif opp["net_profit"] > 15:
                profit_emoji = "üü¢"
            elif opp["net_profit"] > 10:
                profit_emoji = "üü°"
            elif opp["net_profit"] > 2:
                profit_emoji = "üîµ"
            else:
                profit_emoji = "üî¥"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            if opp.get('type') == 'intra' or opp['borrow_exchange'] == opp['staking_exchange']:
                op_type = "üìä –í–ù–£–¢–†–ò"
            else:
                op_type = "üåê –ú–ï–ñ–ë–ò–†–ñ–ê"
                
            message += f"<b>{i}. {opp['coin']}</b> {profit_emoji} {op_type}\n"
            message += f"   üí∞ –ó–∞–π–º: <code>{opp['borrow_rate']:.4f}%</code> –Ω–∞ <b>{opp['borrow_exchange']}</b>\n"
            message += f"   üìà –°—Ç–µ–π–∫–∏–Ω–≥: <code>{opp['staking_apy']:.2f}%</code> –Ω–∞ <b>{opp['staking_exchange']}</b>\n"
            message += f"   üéØ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <code>{opp['net_profit']:.2f}%</code> - {opp['profitability']}\n\n"
        
        return message
    
    def _format_summary(self, intra_opportunities: List[Dict], cross_opportunities: List[Dict], summary_opportunities: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_intra = len(intra_opportunities)
        total_cross = len(cross_opportunities)
        total_all = len(summary_opportunities)
        
        if summary_opportunities:
            best_profit = summary_opportunities[0]["net_profit"]
            avg_profit = sum(opp["net_profit"] for opp in summary_opportunities[:20]) / min(20, len(summary_opportunities))
        else:
            best_profit = 0
            avg_profit = 0
        
        summary = f"""
üìä <b>–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê</b>

üéØ –í–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: <b>{total_intra}</b>
üåê –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: <b>{total_cross}</b>
üìà –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: <b>{total_all}</b>

üèÜ –õ—É—á—à–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{best_profit:.2f}%</b>
üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (—Ç–æ–ø-20): <b>{avg_profit:.2f}%</b>

‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: <b>{len(summary_opportunities) > 0}</b>
        """
        
        return summary
    
    async def send_analysis_results(self, chat_id: int, message_id: int, report: Dict[str, str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç {chat_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω"
            try:
                await self.application.bot.delete_message(chat_id, message_id)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if 'intra' in report:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=report['intra'],
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if 'cross' in report:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=report['cross'],
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if 'summary' in report:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=report['summary'],
                    parse_mode='HTML'
                )
                
            print("‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>\n<code>{str(e)}</code>",
                    parse_mode='HTML'
                )
            except Exception as send_error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    async def send_error(self, chat_id: int, message_id: int, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=error_message,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=error_message,
                    parse_mode='HTML'
                )
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏: {send_error}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            self.application.run_polling()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        token = TELEGRAM_CONFIG["token"]
        
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = ArbitrageTelegramBot(token)
        bot.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()